/*
 * 2015-03-12
 * Simon
 *      服务类的基类
 */

using log4net;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;

namespace ApCommLib
{
    /// <summary>
    /// 所有服务类均集成此类
    /// </summary>
    public abstract class ApService : IDisposable
    {
        #region Field/Properties

        /// <summary>
        /// 服务类寄存的服务端程序
        /// </summary>
        public ApServiceApplication ServiceApplication { get; internal set; }

        /// <summary>
        /// Reference to logger.
        /// </summary>
        protected static readonly ILog Logger = LogManager.GetLogger(typeof(ApService));

        #endregion

        #region Predefined Service Methods

        /// <summary>
        /// 服务端代理类
        /// 验证服务是否可用
        /// </summary>
        /// <param name="message">发送的消息</param>
        /// <returns>回复的消息: "RE:message".</returns>
        [ApServiceMethod("This method can be used to check if service is available.")]
        [return: ApServiceMethodParameter("Reply to message as formatted: 'RE: message'")]
        public string CheckServiceIsAvailable(
            [ApServiceMethodParameter("A message to reply")] string message)
        {
            return ("RE: " + message);
        }

        #endregion

        #region Methods

        /// <summary>
        /// 生成代理类的方法
        /// 此方法只供生成工具使用，在服务类中禁止使用
        /// </summary>
        /// <param name="assemblyName">程序集名称</param>
        /// <param name="namespaceName">代理类的命名空间</param>
        /// <param name="isAsync">客户端是否异步获取回复消息</param>
        /// <returns>使用此服务类的代理类代码</returns>
        public string GenerateProxyClass(string assemblyName, string namespaceName, bool isAsync)
        {
            //Check parameters
            if (string.IsNullOrEmpty(namespaceName))
            {
                namespaceName = "ApServiceProxies";
            }

            //Get this Type, Methods and Attributes
            var serviceType = GetType();
            var methods = serviceType.GetMethods();
            var attributes = serviceType.GetCustomAttributes(typeof(ApServiceAttribute), true);

            //Check for ApService attribute
            if (attributes.Length <= 0)
            {
                return "This class has not ApService attribute. So, it is not a ApService.";
            }

            //Get ApService attribute
            var apServiceAttribute = (ApServiceAttribute)attributes[0];

            //Generate class name
            var proxyClassName = serviceType.Name + "Proxy";

            //Start generating code
            var classBuilder = new StringBuilder();

            //Generate header of file.
            classBuilder.AppendLine("/* ");
            classBuilder.AppendLine(" * This code file is generated by ApService Proxy Generator tool.");
            classBuilder.AppendLine(" * Service Name    : " + serviceType.Name);
            classBuilder.AppendLine(" * Service version : " + apServiceAttribute.Version);
            classBuilder.AppendLine(" * Generating date : " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            classBuilder.AppendLine(" */");
            classBuilder.AppendLine();

            //Namespaces
            WriteUsingNameSpace(classBuilder);
            
            //Class code
            classBuilder.AppendLine();
            classBuilder.AppendLine("namespace " + namespaceName);
            classBuilder.AppendLine("{");
            classBuilder.AppendLine("    /// <summary>");
            classBuilder.AppendLine("    /// This class is a proxy class to use " + serviceType.Name + " service.");
            if (!string.IsNullOrEmpty(apServiceAttribute.Description))
            {
                classBuilder.AppendLine("    /// Description: " + apServiceAttribute.Description);
            }

            classBuilder.AppendLine("    /// </summary>");
            classBuilder.AppendLine("    public partial class " + proxyClassName + " : ApServiceProxyBase");
            classBuilder.AppendLine("    {");

            //Constructor
            classBuilder.AppendLine("        #region Constructor");
            classBuilder.AppendLine("        ");
            classBuilder.AppendLine("        /// <summary>");
            classBuilder.AppendLine("        ///  Creates a new instance of " + proxyClassName + ".");
            classBuilder.AppendLine("        /// </summary>");
            classBuilder.AppendLine("        /// <param name=\"serviceConsumerName\">Reference to a ApServiceConsumer object to send/receive messages</param>");
            classBuilder.AppendLine("        public " + proxyClassName + "(string serviceConsumerName = \"" + assemblyName + "\")");
            classBuilder.AppendLine("            : base(\"" + serviceType.Name + "\",serviceConsumerName)");
            classBuilder.AppendLine("        {");
            classBuilder.AppendLine("            ");
            classBuilder.AppendLine("        }");
            classBuilder.AppendLine("        ");
            classBuilder.AppendLine("        #endregion");
            classBuilder.AppendLine("        ");

            //Methods
            classBuilder.AppendLine("        #region " + serviceType.Name + " methods");
            classBuilder.AppendLine("        ");
            foreach (var method in methods)
            {
                if (IsPredefinedMethod(method.Name))
                {
                    continue;
                }
                WriteMethod(classBuilder, method,isAsync);
            }

            classBuilder.AppendLine("        #endregion");
            classBuilder.AppendLine("        ");
            classBuilder.AppendLine("        #region Default (predefined) service methods");
            classBuilder.AppendLine("        ");
            foreach (var method in methods)
            {
                if (!IsPredefinedMethod(method.Name))
                {
                    continue;
                }
                WriteMethod(classBuilder, method,isAsync);
            }

            classBuilder.AppendLine("        #endregion");

            //Close class
            classBuilder.AppendLine("    }");

            //Close namespace
            classBuilder.AppendLine("}");

            return classBuilder.ToString();
        }

        /// <summary>
        /// 服务类重写此方法
        /// 定义本身需要引用的命名空间
        /// </summary>
        protected virtual void WriteUsingNameSpace(StringBuilder classBuilder)
        {
            classBuilder.AppendLine("using ApCommLib;");
            classBuilder.AppendLine();
            classBuilder.AppendLine("using System;");
            classBuilder.AppendLine("using System.Data;");
            classBuilder.AppendLine("using System.Threading.Tasks;");
            classBuilder.AppendLine("using System.Collections.Generic;");
        }

        /// <summary>
        /// 写方法
        /// </summary>
        /// <param name="classBuilder">字符串拼接对象</param>
        /// <param name="method">方法属性</param>
        /// <param name="isAsync">生成的客户端方法是否是异步获取返回消息</param>
        private void WriteMethod(StringBuilder classBuilder, MethodInfo method,bool isAsync)
        {
            //Check for ApServiceMethod attribute
            var methodAttributes = method.GetCustomAttributes(typeof(ApServiceMethodAttribute), true);
            if (methodAttributes.Length <= 0)
            {
                return;
            }

            //Get ApServiceMethod attribute
            var serviceMethodAttribute = (ApServiceMethodAttribute)methodAttributes[0];

            //Get return type
            var returnType = NormalizeType(method.ReturnType);

            //Get parameters
            var parameters = method.GetParameters();

            //Generate proxy method arguments and invoke method parameters
            var methodArgumentsString = new StringBuilder();
            var invokeParameters = new StringBuilder();
            foreach (var parameter in parameters)
            {
                var paramType = NormalizeType(parameter.ParameterType);
                if (methodArgumentsString.Length > 0)
                {
                    methodArgumentsString.Append(", ");
                }

                methodArgumentsString.Append(paramType + " " + parameter.Name);

                if (parameters.Length == 1 && parameter.ParameterType.IsArray)
                {
                    //当只有一个数组参数时，得重新用数组封装，否则报参数不匹配错误
                    invokeParameters.Append(", new object[] { " + parameter.Name + " }");
                }
                else
                {
                    invokeParameters.Append(", " + parameter.Name);
                }
            }

            #region 方法说明信息
            //Generate method summary
            classBuilder.AppendLine("        /// <summary>");
            classBuilder.AppendLine("        /// " + (serviceMethodAttribute.Description ?? "No method summary available."));
            classBuilder.AppendLine("        /// </summary>");

            //Generate XML-Comments for parameters
            foreach (var parameter in parameters)
            {
                var paramAttributes = parameter.GetCustomAttributes(typeof(ApServiceMethodParameterAttribute), true);
                if (paramAttributes.Length <= 0)
                {
                    continue;
                }

                classBuilder.AppendLine("        /// <param name=\"" + parameter.Name + "\">" + ((ApServiceMethodParameterAttribute)paramAttributes[0]).Description + "</param>");
            }

            //Generate XML-Comments for return value
            if (returnType != "void")
            {
                var returnAttributes = method.ReturnParameter.GetCustomAttributes(typeof(ApServiceMethodParameterAttribute), true);
                if (returnAttributes.Length > 0)
                {
                    classBuilder.AppendLine("        /// <returns>" + ((ApServiceMethodParameterAttribute)returnAttributes[0]).Description + "</returns>");
                }
            }
            #endregion

            #region 方法体
            if (returnType == "void")
            {
                //Generate method signature and opening bracket
                classBuilder.AppendLine("        public " + returnType + " " + method.Name + "(" + methodArgumentsString + ")");
                classBuilder.AppendLine("        {");
                //Generate method body according to return value
                classBuilder.AppendLine("            InvokeMethod(\"" + method.Name + "\"" + invokeParameters + ");");
            }
            else
            {
                if (isAsync)
                {
                    //异步获取返回消息

                    //Generate method signature and opening bracket
                    classBuilder.AppendLine("        public async Task<" + returnType + "> " + method.Name + "(" + methodArgumentsString + ")");
                    classBuilder.AppendLine("        {");
                    //Generate method body according to return value
                    classBuilder.AppendLine("            return (" + returnType + ") await InvokeMethodAndResult(\"" + method.Name + "\"" + invokeParameters + ");");
                }
                else
                {
                    //同步获取返回消息

                    //Generate method signature and opening bracket
                    classBuilder.AppendLine("        public " + returnType + " " + method.Name + "(" + methodArgumentsString + ")");
                    classBuilder.AppendLine("        {");
                    //Generate method body according to return value
                    classBuilder.AppendLine("            return (" + returnType + ") InvokeMethodAndResult(\"" + method.Name + "\"" + invokeParameters + ");");
                }
            }
            #endregion

            //Method closing bracket
            classBuilder.AppendLine("        }");
            classBuilder.AppendLine("        ");
        }

        /// <summary>
        /// Normalizes some known primitive types.
        /// </summary>
        /// <param name="typeName">Type</param>
        /// <returns>Normalized type name</returns>
        private string NormalizeType(Type type)
        {
            string typeName = string.Empty;
            if (type.IsGenericType)
            {
                //获取泛型主类型
                string genername = type.Name.Split('`')[0];
                //获取泛型集合
                Type[] lis = type.GetGenericArguments();
                string tt = string.Empty;
                for (int i = 0; i < lis.Length; i++)
                {
                    if (i == 0)
                    {
                        tt += lis[i].Name;
                    }
                    else
                    {
                        tt += "," + lis[i].Name;
                    }
                }
                typeName = genername + "<" + tt + ">";
            }
            else
            {
                typeName = type.Name;
                switch (typeName)
                {
                    case "Void":
                        return "void";
                    case "Boolean":
                        return "bool";
                    case "Byte":
                        return "byte";
                    case "Byte[]":
                        return "byte[]";
                    case "Int16":
                        return "short";
                    case "Int16[]":
                        return "short[]";
                    case "Int32":
                        return "int";
                    case "Int32[]":
                        return "int[]";
                    case "Int64":
                        return "long";
                    case "Int64[]":
                        return "long[]";
                    case "String":
                        return "string";
                    case "String[]":
                        return "string[]";
                    case "Single":
                        return "float";
                    case "Single[]":
                        return "float[]";
                    case "Double":
                        return "double";
                    case "Double[]":
                        return "double[]";
                }
            }
            return typeName;
        }

        /// <summary>
        /// Checks if a method is predefined method (ApService methods in ApService class).
        /// </summary>
        /// <param name="methodName">Method name to check</param>
        /// <returns>True: Yes, it is..</returns>
        private bool IsPredefinedMethod(string methodName)
        {
            return (methodName == "CheckServiceIsAvailable");
        }

        #endregion

        #region Interface
        public virtual void Dispose()
        {

        }
        #endregion

    }
}
